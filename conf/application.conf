# https://www.playframework.com/documentation/latest/Configuration
{
  persistence {
    user  = "myUser"
    pass  = ""
    host  = "127.0.0.1"
    port  = 0
    ssl   = false
    name  = "dbName"
  }

  node {
    url = "127.0.0.1"
    key = ""
    storagePath = ""
    pass        = ""
    networkType = "MAINNET"
  }

  params {
    pendingBlockNum  = 3
    confirmationNum  = 20
    scriptBasePath   = ""
    pplnsWindow      = 0.5
    scoreAdjustCoeff = 10000000
    # MUST CHANGE TO REAL VALUE IN PRODUCTION
    defaultMinerPK   = "02055e8146e7356b3abce254803ed4f0b7d10235cc3161186a7a4fab58c01ef706" # Used in case node has errors with certain api requests
    # SHOULD PROBABLY CHANGE TO FALSE IN PRODUCTION
    autoConfirmGroups = false
    # Make placements for the same pool parallel to further increase speed of payouts. - Experimental, requires gEpoch tracking
    parallelPoolPlacements = false


    # Amount of ERG to pre-collect for distributions. Not what is actually spent, so try to overestimate.
    # In general, pendingBlockNum * blockReward + pendingBlockNum * 2 ERG is a good place to start
    # Value is given in ERG and converted to nanoErgs at compile time.
    amountToPreCollect = 500
  }
  play.http.secret.key="changeme"
  play.filter.hosts {
    allowed = ["localhost:9000"]
  }

  swagger.api.basepath = "/api"

  # ======Actor + Thread Handling=======

  # These are actor settings, allowing you to dictate the number of actors handling requests
  # Increasing the numbers enables more parallelization at the cost of more thread usage
  # within each actor's assigned thread pools

  subpool-actors {
    quick-query-readers {
      num  = 10
    }
    explorer-handlers {
      num  = 5
    }
    blocking-db-writers {
      num  = 10
    }
    group-req-handlers {
      num  = 5
    }
  }

  # These tasks represent different actions the application may perform and at what intervals they happen
  subpool-tasks {
    # Changes blocks from pending to confirmed status
    block-status-check {
      enabled  = false
      startup  = 10 seconds
      interval = 5 minutes
    }
    # Changes pools from confirmed to initiated and success status, while changing blocks from
    # confirmed to processing status. Equivalent to payout manager with added actions
    group-execution {
      enabled  = true
      startup  = 10 seconds
      interval = 20 minutes
    }
    db-regeneration {
      enabled  = false
      startup  = 5 minutes
      interval = 5 minutes
    }
  }


  subpool-contexts {

    group-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 32
      }
      throughput = 1
}

    task-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 32
      }
      throughput = 1
    }
    # Dynamic dispatcher for quick queries that grows and shrinks with load
    quick-query-dispatcher {
        type = Dispatcher
        # What kind of ExecutionService to use
        executor = "fork-join-executor"
        # Configuration for the fork join pool
        fork-join-executor {
          # Min number of threads to cap factor-based parallelism number to
          parallelism-min = 10
          # Parallelism (threads) ... ceil(available processors * factor)
          parallelism-factor = 2.0
          # Max number of threads to cap factor-based parallelism number to
          parallelism-max = 20
        }
        # Throughput defines the maximum number of messages to be
        # processed per actor before the thread jumps to the next actor.
        # Set to 1 for as fair as possible (1 message per actor)
        throughput = 1
    }
    # Dispatcher used for blocking calls, like third party API calls (explorer), database writes, and extremely large
    # database queries (such as share collection)
    blocking-io-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
          fixed-pool-size = 32
        }
        throughput = 1
    }
  }


}