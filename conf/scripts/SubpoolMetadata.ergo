{
  //
  //
  //  Subpool Metadata Contract - Kirat Singh
  //
  //
  val selfValid = allOf(Coll(
        SELF.R4[Coll[(Coll[Byte], Coll[Long])]].isDefined,         // Last consensus
        SELF.R5[Coll[(Coll[Byte], Int)]].isDefined,                // Pool fees
        SELF.R6[Coll[Long]].isDefined,                             // Pool Information
        SELF.R7[Coll[Coll[Byte]]].isDefined,                       // Pool operators
        INPUTS(0) == SELF
      ))
  val commandType = SELF.R7[Coll[Coll[Byte]]].get.indexOf(INPUTS(1).propositionBytes)

  val commandValid = commandType != -1 || INPUTS(1).propositionBytes == PK("")

  val newMetadataExists = OUTPUTS(0).propositionBytes == SELF.propositionBytes
  val newMetadataValid =
    if(newMetadataExists && commandValid){
      allOf(Coll(
        OUTPUTS(0).R4[Coll[(Coll[Byte], Coll[Long])]].isDefined,
        OUTPUTS(0).R5[Coll[(Coll[Byte], Int)]].isDefined,
        OUTPUTS(0).R6[Coll[Long]].isDefined,
        OUTPUTS(0).R7[Coll[Coll[Byte]]].isDefined,
        OUTPUTS(0).value == SELF.value,
        OUTPUTS(0).tokens.size == 1
      ))
    }else{
      false
    }
  // This boolean verifies that important metadata is preserved
  // during the creation of the new metadata box.
  // It also verifies that the smart pool nft is preserved or generated if the epoch is 0
  val metadataIsPreserved =
    if(newMetadataValid){
      val currentPoolInfo = SELF.R6[Coll[Long]].get
      val newPoolInfo = OUTPUTS(0).R6[Coll[Long]].get

      // verifies that epoch is increased by 1
      val epochIncremented = newPoolInfo(0) == currentPoolInfo(0) + 1L

      // New epoch height is stored and is greater than last height
      val epochHeightStored = newPoolInfo(1) <= HEIGHT && newPoolInfo(1) > currentPoolInfo(1)

      // creation epoch height stays same between spending tx
      val creationHeightPreserved = newPoolInfo(2) == currentPoolInfo(2)

      val smartPoolNFTPreserved = SELF.tokens(0)._1 == OUTPUTS(0).tokens(0)._1


      epochIncremented && epochHeightStored && creationHeightPreserved && smartPoolNFTPreserved
    }else{
      false
    }


  // Verify that the registers in the command box are stored in the new metadata box
  val newMetadataFromCommand =
    if(metadataIsPreserved){
      if(commandType == 0){
        // When commandType == 0 (shareOperator), operator may not change fees or operators
        allOf(Coll(
          OUTPUTS(0).R4[Coll[(Coll[Byte], Coll[Long])]].get == INPUTS(1).R4[Coll[(Coll[Byte], Coll[Long])]].get,
          OUTPUTS(0).R5[Coll[(Coll[Byte], Int)]].get        == SELF.R5[Coll[(Coll[Byte], Int)]].get,
          OUTPUTS(0).R6[Coll[Long]].get                     == INPUTS(1).R6[Coll[Long]].get,
          OUTPUTS(0).R7[Coll[Coll[Byte]]].get               == SELF.R7[Coll[Coll[Byte]]].get
        ))
      }else{
        if(commandType > 0){
          allOf(Coll(
            OUTPUTS(0).R4[Coll[(Coll[Byte], Coll[Long])]].get == SELF.R4[Coll[(Coll[Byte], Coll[Long])]].get,
            OUTPUTS(0).R5[Coll[(Coll[Byte], Int)]].get        == INPUTS(1).R5[Coll[(Coll[Byte], Int)]].get,
            OUTPUTS(0).R6[Coll[Long]].get                     == SELF.R6[Coll[Long]].get,
            OUTPUTS(0).R7[Coll[Coll[Byte]]].get               == INPUTS(1).R7[Coll[Coll[Byte]]].get
            OUTPUTS(0).R7[Coll[Coll[Byte]]].get(0)            == SELF.R7[Coll[Coll[Byte]]].get(0)
          ))
        }
      }
    }else{
      false
    }

  if(selfValid){
    // We verify that the metadata box follows the proper consensus
    // Currently no way to destroy metadata box
    sigmaProp(newMetadataFromCommand)
  }else{
    sigmaProp(true)
  }
}